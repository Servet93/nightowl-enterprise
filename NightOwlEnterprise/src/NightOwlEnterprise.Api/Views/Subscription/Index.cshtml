<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Accept a payment</title>
    <meta name="description" content="A demo of a payment on Stripe" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.3/dist/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.1.3/dist/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="checkout.css" />
    <script src="https://js.stripe.com/v3/"></script>
<!--    <script src="checkout.js" defer></script>-->
</head>
<body>
<!-- Display a payment form -->
<form id="payment-form">

    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Enter email">
<!--        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>-->
    </div>

    <div class="form-group">
        <label for="name_surname">Ad Soyad</label>
        <input type="text" class="form-control" id="name_surname">
    </div>

    <div class="form-group">
        <label for="address">Adres</label>
        <textarea class="form-control" id="address" rows="2"></textarea>
    </div>

    <div class="form-group">
        <label for="city">Şehir</label>
        <select class="form-control" id="city">
        </select>
    </div>
    
    <div id="payment-element">
        <!--Stripe.js injects the Payment Element-->
    </div>
    <button id="submit">
        <div class="spinner hidden" id="spinner"></div>
        <span id="button-text">Pay now</span>
    </button>
    <div id="payment-message"></div>
    <br>
    <div id="error-list"></div>
</form>

<script>
    
    // Türkiye şehir isimleri
    var turkishCities = [
        "Adana", "Adıyaman", "Afyonkarahisar", "Ağrı", "Amasya",
        "Ankara", "Antalya", "Artvin", "Aydın", "Balıkesir",
        "Bilecik", "Bingöl", "Bitlis", "Bolu", "Burdur",
        "Bursa", "Çanakkale", "Çankırı", "Çorum", "Denizli",
        "Diyarbakır", "Edirne", "Elazığ", "Erzincan", "Erzurum",
        "Eskişehir", "Gaziantep", "Giresun", "Gümüşhane", "Hakkâri",
        "Hatay", "Isparta", "İçel (Mersin)", "İstanbul", "İzmir",
        "Kars", "Kastamonu", "Kayseri", "Kırklareli", "Kırşehir",
        "Kocaeli", "Konya", "Kütahya", "Malatya", "Manisa",
        "Kahramanmaraş", "Mardin", "Muğla", "Muş", "Nevşehir",
        "Niğde", "Ordu", "Rize", "Sakarya", "Samsun",
        "Siirt", "Sinop", "Sivas", "Tekirdağ", "Tokat",
        "Trabzon", "Tunceli", "Şanlıurfa", "Uşak", "Van",
        "Yozgat", "Zonguldak", "Aksaray", "Bayburt", "Karaman",
        "Kırıkkale", "Batman", "Şırnak", "Bartın", "Ardahan",
        "Iğdır", "Yalova", "Karabük", "Kilis", "Osmaniye", "Düzce"
    ];

    // Şehirleri <select> elementine ekle
    var citiesSelect = document.getElementById('city');
    turkishCities.forEach(function(city) {
        var option = document.createElement('option');
        option.value = city;
        option.text = city;
        citiesSelect.appendChild(option);
    });
</script>
<script>
    // Set your publishable key: remember to change this to your live publishable key in production
    // See your keys here: https://dashboard.stripe.com/apikeys
    // const stripe = Stripe('pk_test_TYooMQauvdEDq54NiTphI7jx');
    // const stripe = Stripe('pk_test_51OsO7cEyxtA03PfNC4Zys51OQWzLawzDb2HejwXaE7looNrjxZ4NWFvupi4E8gsNMPJ7eVewtqcmvM0epjouArpj00aU3SusxD');
    const stripe = Stripe('@ViewData["stripe-publishable-key"].ToString()');
    
    const options = {
        mode: 'subscription',
        amount: 3000,
        currency: 'try',
        paymentMethodCreation: 'manual',
        // Fully customizable with appearance API.
        appearance: {/*...*/},
    };

    // Set up Stripe.js and Elements to use in checkout form
    const elements = stripe.elements(options);

    const paymentElementOptions = {
        layout: "tabs",
        fields: {
            billingDetails: {
                address: {
                    country: 'never'
                }
            }
        }
    };
    
    // Create and mount the Payment Element
    const paymentElement = elements.create('payment', paymentElementOptions);
    paymentElement.mount('#payment-element');

    const form = document.getElementById('payment-form');
    const submitBtn = document.getElementById('submit');

    const handleError = (error) => {
        const messageContainer = document.querySelector('#payment-message');
        messageContainer.textContent = error.message;
        submitBtn.disabled = false;
    }

    form.addEventListener('submit', async (event) => {
        // We don't want to let default form submission happen here,
        // which would refresh the page.
        event.preventDefault();

        // Prevent multiple form submissions
        if (submitBtn.disabled) {
            return;
        }

        // Disable form submission while loading
        submitBtn.disabled = true;

        // Trigger form validation and wallet collection
        const {error: submitError} = await elements.submit();
        if (submitError) {
            handleError(submitError);
            return;
        }
        
        // Create the PaymentMethod using the details collected by the Payment Element
        const {error, paymentMethod} = await stripe.createPaymentMethod({
            elements,
            params: {
                billing_details: {
                    // name: 'Jenny Rosen',
                    address: {
                        country: "TR",
                    }
                }
            }
        });
        
        if (error) {
            // This point is only reached if there's an immediate error when
            // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)
            handleError(error);
            return;
        }
        
          // Create the subscription
          const resSubscription = await fetch("/students/subscribe", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify({
              paymentMethodId: paymentMethod.id,
              NameSurname: $("#name_surname").val(),
              Email: $("#email").val(),
              Address: $("#address").val(),
              City: $("#city").val(),
            }),
          });
             
        const resSubscriptionData = await resSubscription.json();
        
        if (!resSubscription.ok){
            handleValidationProblem(resSubscriptionData);
            submitBtn.disabled = false;
            return;
        }
        
        // Handle any next actions or errors. See the Handle any next actions step for implementation.
        handleServerResponse(resSubscriptionData);
        
        submitBtn.disabled = false;
        
        // const {type, clientSecret} = resSubscriptionData;
        // const confirmIntent = type === "setup" ? stripe.confirmSetup : stripe.confirmPayment;
        //
        // // Confirm the Intent using the details collected by the Payment Element
        // const {error} = await confirmIntent({
        //     elements,
        //     clientSecret,
        //     confirmParams: {
        //         return_url: 'https://example.com/order/123/complete',
        //         payment_method_data: {
        //              billing_details: {
        //                 // name: 'Jenny Rosen',
        //                 address: {
        //                     country: "TR",
        //                 }
        //             }
        //         }
        //     },
        // });
        //
        // if (error) {
        //     // This point is only reached if there's an immediate error when confirming the Intent.
        //     // Show the error to your customer (for example, "payment details incomplete").
        //     handleError(error);
        // } else {
        //     // Your customer is redirected to your `return_url`. For some payment
        //     // methods like iDEAL, your customer is redirected to an intermediate
        //     // site first to authorize the payment, then redirected to the `return_url`.
        // }
        //
        // if (error) {
        //     // This point is only reached if there's an immediate error when
        //     // creating the PaymentMethod. Show the error to your customer (for example, payment details incomplete)
        //     handleError(error);
        //     return;
        // }
    });

    const handleServerResponse = async (response) => {
        if (response.error) {
            // Show error from server on payment form
            showMessage("Something went wrong. " + response.error);
        } else if (response.status === "requires_action") {
            // Use Stripe.js to handle the required next action
            const {
                error,
                paymentIntent
            } = await stripe.handleNextAction({
                clientSecret: response.clientSecret
            });

            if (error) {
                // Show error from Stripe.js in payment form

                showMessage("Something went wrong(3D Secure). " + JSON.stringify(error.message));
            } else {
                // Actions handled, show success message
                showMessage("Payment succeeded(3D Secure)!");
            }
        } else {
            // No actions needed, show success message
            showMessage("Payment succeeded!");
        }
    }

    // ------- UI helpers -------
    function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");

        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;
    }

    // Hata işleme fonksiyonu
    function handleValidationProblem(response) {
        // Hatanın HTML temsilini oluştur
        const htmlErrors = convertValidationProblemToHtml(response);

        // Hataları gösterecek bir elementi bul
        // const errorDisplayElement = document.getElementById("error-display");
        const errorDisplayElement = document.getElementById("error-list");

        // HTML'i errorDisplayElement içine ekle
        errorDisplayElement.innerHTML = htmlErrors;
    }

    // ValidationProblemDetails'ı HTML'e çeviren fonksiyon
    function convertValidationProblemToHtml(validationProblem) {
        let html = "<ul>";

        for (const [key, errors] of Object.entries(validationProblem.errors)) {
            for (const error of errors) {
                // console.log("key -> " + key);
                // console.log("error -> " + error);
                html += `<!--<li><strong>${key}:</strong> ${error}</li>-->`;
                html += `<li><strong>${error}</strong></li>`;
            }
        }

        html += "</ul>";
        return html;
    }
    
</script>
</body>
</html>