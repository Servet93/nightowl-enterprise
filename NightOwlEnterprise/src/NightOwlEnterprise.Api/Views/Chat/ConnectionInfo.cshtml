<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Connections</title>
    <style>
        .userGroup {
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        .userHeader {
            background-color: #f2f2f2;
            padding: 8px;
            cursor: pointer;
        }
        .connectionList {
            display: none;
            padding: 8px;
        }
        .connectionList.active {
            display: block;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        .pagination {
            margin-top: 10px;
            text-align: center;
        }
        .filter-input {
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <h1>User Connections</h1>
    
    <input type="text" id="filterInput" class="filter-input" placeholder="Filter by User Identifier...">
    
    <div id="userGroups"></div>
    <div class="pagination" id="pagination"></div>

    <script>
        // const apiUrl = 'https://your-api-endpoint/connections';
        const pageSize = 5; // Sayfa başına gösterilecek öğe sayısı
        let currentPage = 1;

        function fetchConnections(userIdentifier = null) {
            const url = new URL('https://chat.baykusmentorluk.com/chat/getConnections');
            url.searchParams.append('page', currentPage);
            url.searchParams.append('pageSize', pageSize);

            if (userIdentifier) {
                url.searchParams.append('userIdentifier', userIdentifier);
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    updateUserGroups(data, userIdentifier);
                    updatePagination(data.length);
                })
                .catch(error => {
                    console.error('Error fetching connections:', error);
                });
        }

        function updateUserGroups(data, filter) {
            const userGroupsContainer = document.getElementById("userGroups");
            userGroupsContainer.innerHTML = "";

            // Gruplanmış veri yapısı oluşturma
            const groupedData = groupByUserIdentifier(data);

            // Her kullanıcı grubu için collapse panel oluşturma
            Object.keys(groupedData).forEach(userIdentifier => {
                console.log(userIdentifier);
                
                var email = groupedData[userIdentifier][0].email;
                var role = groupedData[userIdentifier][0].role;
                var name = groupedData[userIdentifier][0].name;
                
                console.log(email + " " + name + " " + role );
                
                const userGroup = document.createElement("div");
                userGroup.classList.add("userGroup");

                const userHeader = document.createElement("div");
                userHeader.classList.add("userHeader");
                userHeader.textContent = `User Identifier: ${userIdentifier}, Email: ${email}, Name: ${name}, Role: ${role}`;
                userHeader.addEventListener("click", function() {
                    const connectionList = this.nextElementSibling;
                    connectionList.classList.toggle("active");
                });

                const connectionList = document.createElement("div");
                connectionList.classList.add("connectionList");

                const table = document.createElement("table");
                table.innerHTML = `
                    <thead>
                        <tr>
                            <th>Connection ID</th>
                            <th>Created At</th>
                            <th>Updated At</th>
                            <th>Disconnected Time</th>
                            <th>Current State</th>
                        </tr>
                    </thead>
                    <tbody id="connectionTableBody-${userIdentifier}">
                        <!-- Bağlantılar buraya dinamik olarak eklenecek -->
                    </tbody>
                `;
                connectionList.appendChild(table);

                userGroup.appendChild(userHeader);
                userGroup.appendChild(connectionList);
                userGroupsContainer.appendChild(userGroup);

                // Kullanıcı bağlantılarını tabloya ekleme
                groupedData[userIdentifier].forEach(connection => {
                    const row = `
                        <tr>
                            <td>${connection.connectionId}</td>
                            <td>${new Date(connection.createdAt).toLocaleString()}</td>
                            <td>${new Date(connection.updatedAt).toLocaleString()}</td>
                            <td>${new Date(connection.disconnectedTime).toLocaleString()}</td>
                            <td>${connection.currentState}</td>
                        </tr>
                    `;
                    const tableBody = document.getElementById(`connectionTableBody-${userIdentifier}`);
                    tableBody.innerHTML += row;
                });
            });
        }

        function groupByUserIdentifier(data) {
            return data.reduce((groups, connection) => {
                const { userIdentifier } = connection;
                if (!groups[userIdentifier]) {
                    groups[userIdentifier] = [];
                }
                groups[userIdentifier].push(connection);
                return groups;
            }, {});
        }

        function updatePagination(totalItems) {
            const paginationContainer = document.getElementById('pagination');
            const totalPages = Math.ceil(totalItems / pageSize);

            let paginationHtml = '';
            for (let i = 1; i <= totalPages; i++) {
                paginationHtml += `<button onclick="changePage(${i})">${i}</button>`;
            }
            paginationContainer.innerHTML = paginationHtml;
        }

        function changePage(page) {
            currentPage = page;
            const filterValue = document.getElementById('filterInput').value.trim();
            fetchConnections(filterValue);
        }

        // Sayfa yüklendiğinde tabloyu ve sayfalama işlemlerini güncelle
        document.addEventListener("DOMContentLoaded", function() {
            fetchConnections();

            // Filtreleme inputunu dinamik olarak tabloyu güncellemek için dinleyici ekle
            document.getElementById("filterInput").addEventListener("input", function() {
                currentPage = 1;
                fetchConnections(this.value.trim());
            });
        });
    </script>
</body>
</html>
